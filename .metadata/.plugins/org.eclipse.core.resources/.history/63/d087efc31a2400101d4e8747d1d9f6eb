package com.taskmgment.config;

import java.io.IOException;
import java.util.List;

import javax.crypto.SecretKey;

import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

// Runs once per request (OncePerRequestFilter).
// Checks for a JWT token in the Authorization header.
// Validates the JWT token (checks signature, expiration, etc.).
// Extracts user information (like email and roles).
// Sets the authentication context in Spring Security.

public class JwtTokenValidator extends OncePerRequestFilter {

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
		// Get JWT from the Authorization Header
        String jwt = request.getHeader(JwtConstant.JWT_HEADER);
		
        // Weâ€™re expecting the token in a header like Authorization: Bearer <token>.
        // We extract it by removing the "Bearer " part:
		if(jwt!=null) {
			jwt=jwt.substring(7);
			
			
			try {
				// Decode the JWT using the secret key.
				SecretKey key= Keys.hmacShaKeyFor(JwtConstant.SECRET_KEY.getBytes());
				
				// Extract the claims (the data stored inside the token) if validated.
				Claims claims=Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jwt).getBody();
				
				// Extract email
				String email=String.valueOf(claims.get("email"));
				
				// Authorities is a string (like "ROLE_USER" or "ROLE_ADMIN").
				String authorities = String.valueOf(claims.get("authorities"));
				
				System.out.println("authorities -------- "+authorities);
				
				// Convert it to a list of Spring Security authorities:
				List<GrantedAuthority> auths=AuthorityUtils.commaSeparatedStringToAuthorityList(authorities);
				
				// Now Spring Security knows who the user is and what permissions they have.
				Authentication athentication=new UsernamePasswordAuthenticationToken(email,null, auths);
				
				// Stores it in SecurityContextHolder, so the user is considered authenticated.
				SecurityContextHolder.getContext().setAuthentication(athentication);
				
			} 
			// If the token is invalid (expired, wrong signature, etc.), an exception is thrown and Spring will block the request.
			catch (Exception e) {
				throw new BadCredentialsException("invalid token...");
			}
		}
		// After validating, the request continues to the next filter/controller.
		filterChain.doFilter(request, response);
	}
}

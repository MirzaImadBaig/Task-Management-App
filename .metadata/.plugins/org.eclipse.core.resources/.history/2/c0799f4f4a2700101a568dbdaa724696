package com.user.management.exception;

import java.time.LocalDateTime;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

// Global exception handler class to handle various exceptions and provide a consistent response for errors.

@ControllerAdvice
public class GlobalExceptions {
    
    // Handle custom UserException and return a structured error response
    @ExceptionHandler(UserException.class)
    public ResponseEntity<ErrorDetails> userExceptionHandler(UserException ue, WebRequest req) {
        // Creating error details with the exception message and request info
        ErrorDetails error = new ErrorDetails(ue.getMessage(), req.getDescription(false), LocalDateTime.now());
        // Returning the error details with a BAD_REQUEST (400) status
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
    
    // Handle any other generic exceptions and return a structured error response
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorDetails> otherExceptionHandler(Exception ex, WebRequest req) {
        // Creating error details with the exception message and request info
        ErrorDetails error = new ErrorDetails(ex.getMessage(), req.getDescription(false), LocalDateTime.now());
        // Returning the error details with a BAD_REQUEST (400) status
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
}
